import streamlit as st
import pandas as pd
from pycaret.classification import load_model, predict_model
import seaborn as sns
import matplotlib.pyplot as plt

# Load saved model
model = load_model("churn_model")

st.title("Customer Churn Prediction App")
st.write("Fill in the customer details to predict churn.")

# Helper function to map Yes/No to 1/0
def yes_no_to_int(value):
    return 1 if value == "Yes" else 0

# Collect user input
age = st.number_input("Age", min_value=18, max_value=100, help="The customer's age in years")
avg_monthly_gb = st.number_input("Avg Monthly GB Download", min_value=0.0, help="Average monthly internet usage in GB")
avg_long_dist = st.number_input("Avg Monthly Long Distance Charges", min_value=0.0, help="Average monthly long distance charges")
cltv = st.number_input("CLTV", min_value=0.0, help="Customer Lifetime Value")
contract = st.selectbox("Contract", ["Month-to-month", "One year", "Two year"], help="Type of customer contract")
dependents = yes_no_to_int(st.selectbox("Dependents", ["Yes", "No"], help="Whether the customer has dependents"))
device_protection = yes_no_to_int(st.selectbox("Device Protection Plan", ["Yes", "No"], help="Whether the customer has a device protection plan"))
gender = st.selectbox("Gender", ["Male", "Female"], help="The customer's gender")
internet_service = yes_no_to_int(st.selectbox("Internet Service", ["Yes", "No"], help="Indicates if the customer subscribes to internet service"))
internet_type = st.selectbox("Internet Type", ["DSL", "Fiber optic", "Cable", "None"], help="Type of internet service provider")
married = yes_no_to_int(st.selectbox("Married", ["Yes", "No"], help="Whether the customer is married"))
monthly_charge = st.number_input("Monthly Charge", min_value=0.0, help="Total monthly charge for all services")
multiple_lines = yes_no_to_int(st.selectbox("Multiple Lines", ["Yes", "No"], help="Whether the customer has multiple phone lines"))
num_dependents = st.number_input("Number of Dependents", min_value=0, help="Number of dependents")
num_referrals = st.number_input("Number of Referrals", min_value=0, help="Number of referrals made by the customer")
offer = st.selectbox("Offer", ["Offer A", "Offer B", "Offer C", "Offer D", "None"], help="The last marketing offer accepted by the customer")
online_backup = yes_no_to_int(st.selectbox("Online Backup", ["Yes", "No"], help="Whether the customer has online backup service"))
online_security = yes_no_to_int(st.selectbox("Online Security", ["Yes", "No"], help="Whether the customer has online security service"))
paperless_billing = yes_no_to_int(st.selectbox("Paperless Billing", ["Yes", "No"], help="Whether the customer has paperless billing enabled"))
partner = yes_no_to_int(st.selectbox("Partner", ["Yes", "No"], help="Whether the customer has a partner"))
payment_method = st.selectbox("Payment Method", ["Electronic check", "Mailed check", "Bank transfer", "Credit card"], help="Customer's payment method")
phone_service = yes_no_to_int(st.selectbox("Phone Service", ["Yes", "No"], help="Whether the customer has phone service"))
premium_support = yes_no_to_int(st.selectbox("Premium Tech Support", ["Yes", "No"], help="Whether the customer has premium tech support"))
quarter = st.selectbox("Quarter", ["Q1", "Q2", "Q3", "Q4"], help="Fiscal quarter of the data")
referred_friend = yes_no_to_int(st.selectbox("Referred a Friend", ["Yes", "No"], help="Whether the customer has referred a friend"))
satisfaction_score = st.slider("Satisfaction Score", 1, 5, help="The customer's satisfaction rating (1-5)")
senior_citizen = yes_no_to_int(st.selectbox("Senior Citizen", ["Yes", "No"], help="Whether the customer is a senior citizen"))
state = st.text_input("State", help="State of the customer's residence")
streaming_movies = yes_no_to_int(st.selectbox("Streaming Movies", ["Yes", "No"], help="Whether the customer has streaming movies service"))
streaming_music = yes_no_to_int(st.selectbox("Streaming Music", ["Yes", "No"], help="Whether the customer has streaming music service"))
streaming_tv = yes_no_to_int(st.selectbox("Streaming TV", ["Yes", "No"], help="Whether the customer has streaming TV service"))
tenure = st.number_input("Tenure in Months", min_value=0, help="Number of months the customer has been with the company")
total_charges = st.number_input("Total Charges", min_value=0.0, help="Total charges for the customer")
extra_data_charges = st.number_input("Total Extra Data Charges", min_value=0.0, help="Total charges for extra data downloads")
long_distance_charges = st.number_input("Total Long Distance Charges", min_value=0.0, help="Total charges for long distance calls")
total_refunds = st.number_input("Total Refunds", min_value=0.0, help="Total refunds received by the customer")
total_revenue = st.number_input("Total Revenue", min_value=0.0, help="Total revenue generated by the customer")
under_30 = yes_no_to_int(st.selectbox("Under 30", ["Yes", "No"], help="Whether the customer is under 30 years old"))
unlimited_data = yes_no_to_int(st.selectbox("Unlimited Data", ["Yes", "No"], help="Whether the customer has unlimited data"))

# Create DataFrame from inputs
input_df = pd.DataFrame({
    "Age": [age],
    "Avg Monthly GB Download": [avg_monthly_gb],
    "Avg Monthly Long Distance Charges": [avg_long_dist],
    "CLTV": [cltv],
    "Contract": [contract],
    "Dependents": [dependents],
    "Device Protection Plan": [device_protection],
    "Gender": [gender],
    "Internet Service": [internet_service],
    "Internet Type": [internet_type],
    "Married": [married],
    "Monthly Charge": [monthly_charge],
    "Multiple Lines": [multiple_lines],
    "Number of Dependents": [num_dependents],
    "Number of Referrals": [num_referrals],
    "Offer": [offer],
    "Online Backup": [online_backup],
    "Online Security": [online_security],
    "Paperless Billing": [paperless_billing],
    "Partner": [partner],
    "Payment Method": [payment_method],
    "Phone Service": [phone_service],
    "Premium Tech Support": [premium_support],
    "Quarter": [quarter],
    "Referred a Friend": [referred_friend],
    "Satisfaction Score": [satisfaction_score],
    "Senior Citizen": [senior_citizen],
    "State": [state],
    "Streaming Movies": [streaming_movies],
    "Streaming Music": [streaming_music],
    "Streaming TV": [streaming_tv],
    "Tenure in Months": [tenure],
    "Total Charges": [total_charges],
    "Total Extra Data Charges": [extra_data_charges],
    "Total Long Distance Charges": [long_distance_charges],
    "Total Refunds": [total_refunds],
    "Total Revenue": [total_revenue],
    "Under 30": [under_30],
    "Unlimited Data": [unlimited_data]
})

# Predict
if st.button("Predict Churn"):
    prediction = predict_model(model, data=input_df)
    
        # DEBUG: show the output structure
    st.write("Prediction DataFrame Preview:")
    st.dataframe(prediction)
    st.write("Columns:", prediction.columns.tolist())

    # Try to get probability if available, else just predicted label
    if "Score_1" in prediction.columns:
        churn_prob = prediction["Score_1"].iloc[0]
        st.write(f"### Churn Probability: {churn_prob:.2%}")
    elif "Label" in prediction.columns:
        churn_label = prediction["Label"].iloc[0]
        st.write(f"### Predicted Churn: {'Yes' if churn_label == 1 else 'No'}")

    elif "prediction_label" in prediction.columns:
        churn_label = prediction["prediction_label"].iloc[0]
        st.write(f"### Predicted Churn: {'Yes' if churn_label == 1 else 'No'}")

    else:
        st.write("âš  No valid prediction column found in output.")
data=pd.read_csv('Dataset\\train.csv')
# Visualization button
if st.button("ðŸ“Š Visualize Insights"):
    st.subheader("Customer Churn Insights")
        
    # Churn vs Non-Churn Count
    fig1, ax1 = plt.subplots()
    sns.countplot(x='Churn', data=data, palette='pastel', ax=ax1)
    ax1.set_title("Churn vs Non-Churn")
    st.pyplot(fig1)

    # Churn by Contract Type
    fig2, ax2 = plt.subplots()
    sns.countplot(x='Contract', hue='Churn', data=data, palette='Set2', ax=ax2)
    ax2.set_title("Churn by Contract Type")
    st.pyplot(fig2)

    # Tenure Distribution
    fig3, ax3 = plt.subplots()
    sns.histplot(data=data, x='Tenure in Months', hue='Churn', multiple='stack', palette='coolwarm', ax=ax3)
    ax3.set_title("Tenure Distribution by Churn Status")
    st.pyplot(fig3)